name: Build (Windows)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-windows:
    runs-on: windows-latest
    env:
      BUILD_DIR: build
      CONFIG: Release
      APP_NAME: Niseyuki

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up MSVC (VS2022)
        uses: ilammy/msvc-dev-cmd@v1

      - name: Install Qt 6 (qtmultimedia module)
        uses: jurplel/install-qt-action@v4
        with:
          version: '6.5.3'
          modules: 'qtmultimedia'

      - name: Configure CMake (MSVC generator)
        run: cmake -S . -B ${{ env.BUILD_DIR }} -G "Visual Studio 17 2022" -A x64

      - name: Build
        run: cmake --build ${{ env.BUILD_DIR }} --config ${{ env.CONFIG }} --parallel

      - name: Find built EXE
        id: findexe
        shell: pwsh
        run: |
          $exe = Get-ChildItem "${{ env.BUILD_DIR }}\${{ env.CONFIG }}\*.exe" | Select-Object -First 1
          if (-not $exe) { throw "Executable not found in build output at ${{ env.BUILD_DIR }}\${{ env.CONFIG }}" }
          "exe_path=$($exe.FullName)" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          "out_dir=$($exe.DirectoryName)" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

      - name: Deploy Qt runtime (windeployqt)
        shell: pwsh
        run: |
          $wqt = (Get-Command windeployqt.exe -ErrorAction Stop).Path
          & $wqt --no-quick-import --no-translations --no-system-d3d-compiler --no-opengl-sw "${{ steps.findexe.outputs.exe_path }}"

      - name: Install FFmpeg (Chocolatey)
        shell: pwsh
        run: |
          choco install ffmpeg -y --no-progress
          $ff = Get-ChildItem "C:\ProgramData\chocolatey\lib\ffmpeg" -Recurse -Filter ffmpeg.exe | Select-Object -First 1
          $fp = Get-ChildItem "C:\ProgramData\chocolatey\lib\ffmpeg" -Recurse -Filter ffprobe.exe | Select-Object -First 1
          if (-not $ff -or -not $fp) { throw "FFmpeg binaries not found via Chocolatey." }
          Copy-Item $ff.FullName "${{ steps.findexe.outputs.out_dir }}\" -Force
          Copy-Item $fp.FullName "${{ steps.findexe.outputs.out_dir }}\" -Force

      - name: Copy SFX into output dir
        shell: pwsh
        run: |
          $sfxOut = Join-Path "${{ steps.findexe.outputs.out_dir }}" "sfx"
          New-Item -ItemType Directory -Force -Path $sfxOut | Out-Null
          if (Test-Path "audio") {
            Get-ChildItem audio -Include *.wav,*.ogg -Recurse | ForEach-Object {
              Copy-Item $_.FullName $sfxOut -Force
            }
          }

      - name: Add third-party notices
        shell: pwsh
        run: |
          $out = "${{ steps.findexe.outputs.out_dir }}"
          $f = Join-Path $out "THIRD_PARTY_NOTICES.txt"
          "Niseyuki — third-party notices" | Out-File $f -Encoding UTF8
          "" | Out-File $f -Append
          "FFmpeg (LGPL v2.1+ / GPL parts if used)" | Out-File $f -Append
          "https://ffmpeg.org/" | Out-File $f -Append
          "" | Out-File $f -Append
          "Qt (LGPL/GPL/commercial, see Qt licensing)" | Out-File $f -Append
          "https://www.qt.io/" | Out-File $f -Append
          "" | Out-File $f -Append
          "Default notification sounds © Maoudamashii (魔王魂) — CC BY 4.0" | Out-File $f -Append
          "https://maou.audio/" | Out-File $f -Append

      - name: Package artifact (zip)
        shell: pwsh
        run: |
          $src = "${{ steps.findexe.outputs.out_dir }}"
          $zip = "${{ env.APP_NAME }}-windows-x64.zip"
          if (Test-Path $zip) { Remove-Item $zip -Force }
          Compress-Archive -Path "$src\*" -DestinationPath $zip -Force
          Write-Host "Created $zip"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: niseyuki-windows-x64
          path: Niseyuki-windows-x64.zip
